# Generated by Django 5.2.5 on 2025-09-04 20:56

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


def create_roles(apps, schema_editor):
    Role = apps.get_model('users', 'Role')
    roles = [
        {'name': 'Пользователь', 'description': 'Может работать только со своими объектами'},
        {'name': 'Администратор', 'description': 'Полный доступ ко всем объектам'},
        {'name': 'Редактор', 'description': 'Может управлять всеми объектами, но не может удалять чужие'},
    ]
    for role_data in roles:
        Role.objects.create(**role_data)


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='BusinessElement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Name')),
                ('description', models.TextField(blank=True, max_length=255, null=True, verbose_name='Description')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('name', models.CharField(max_length=50, unique=True, verbose_name='Role name')),
                ('description', models.TextField(blank=True, max_length=255, null=True, verbose_name='Description')),
            ],
            options={
                'verbose_name': 'Role',
                'verbose_name_plural': 'Roles',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('middle_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Middle name')),
                ('email', models.EmailField(max_length=100, unique=True, verbose_name='Email Address')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('role', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='users', to='users.role', verbose_name='Role')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Session',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('session_key', models.CharField(max_length=255, unique=True, verbose_name='Session key')),
                ('expire_at', models.DateTimeField()),
                ('is_active', models.BooleanField(default=True, verbose_name='Is active')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sessions', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AccessRoleRule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('read_permission', models.BooleanField(default=False, verbose_name='Read own')),
                ('read_all_permission', models.BooleanField(default=False, verbose_name='Read all')),
                ('create_permission', models.BooleanField(default=False, verbose_name='Create')),
                ('update_permission', models.BooleanField(default=False, verbose_name='Update own')),
                ('update_all_permission', models.BooleanField(default=False, verbose_name='Update all')),
                ('delete_permission', models.BooleanField(default=False, verbose_name='Delete own')),
                ('delete_all_permission', models.BooleanField(default=False, verbose_name='Delete all')),
                ('element', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='access_rules', to='users.businesselement', verbose_name='Business element')),
                ('role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='access_rules', to='users.role', verbose_name='Role')),
            ],
            options={
                'verbose_name': 'Access role rule',
                'verbose_name_plural': 'Access role rules',
                'unique_together': {('role', 'element')},
            },
        ),
        migrations.RunPython(create_roles),
    ]
